"""add_job_models

Revision ID: 2a8e5ec6b23b
Revises: 7d8d48672b3e
Create Date: 2025-08-05 22:40:28.570549

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2a8e5ec6b23b'
down_revision = '7d8d48672b3e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    
    # Handle job_post_types table
    if 'job_post_types' in inspector.get_table_names():
        # Table exists, check for missing columns
        columns = [col['name'] for col in inspector.get_columns('job_post_types')]
        
        if 'created_at' not in columns:
            op.add_column('job_post_types', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True))
        
        if 'updated_at' not in columns:
            op.add_column('job_post_types', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    else:
        # Create job_post_types table
        op.create_table('job_post_types',
            sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
            sa.Column('name', sa.VARCHAR(length=255), nullable=False),
            sa.Column('description', sa.TEXT(), nullable=True),
            sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
            sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
            sa.Column('is_deleted', sa.BOOLEAN(), nullable=True),
            sa.PrimaryKeyConstraint('id', name=op.f('job_post_types_pkey'))
        )
        op.create_index(op.f('ix_job_post_types_id'), 'job_post_types', ['id'], unique=False)
    
    # Handle jobs table
    if 'jobs' in inspector.get_table_names():
        # Table exists, check for missing columns
        columns = [col['name'] for col in inspector.get_columns('jobs')]
        
        missing_columns = []
        if 'salary_min' not in columns:
            missing_columns.append(sa.Column('salary_min', sa.FLOAT(), nullable=True))
        if 'salary_max' not in columns:
            missing_columns.append(sa.Column('salary_max', sa.FLOAT(), nullable=True))
        if 'deadline' not in columns:
            missing_columns.append(sa.Column('deadline', sa.VARCHAR(length=100), nullable=True))
        if 'attachments' not in columns:
            missing_columns.append(sa.Column('attachments', sa.TEXT(), nullable=True))
        if 'is_active' not in columns:
            missing_columns.append(sa.Column('is_active', sa.BOOLEAN(), nullable=True))
        if 'is_deleted' not in columns:
            missing_columns.append(sa.Column('is_deleted', sa.BOOLEAN(), nullable=True))
        if 'updated_at' not in columns:
            missing_columns.append(sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
        
        for column in missing_columns:
            op.add_column('jobs', column)
    else:
        # Create jobs table
        op.create_table('jobs',
            sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
            sa.Column('title', sa.VARCHAR(length=255), nullable=False),
            sa.Column('description', sa.TEXT(), nullable=True),
            sa.Column('user_id', sa.INTEGER(), nullable=False),
            sa.Column('job_post_type_id', sa.INTEGER(), nullable=False),
            sa.Column('location_id', sa.INTEGER(), nullable=True),
            sa.Column('experience_level', sa.VARCHAR(length=100), nullable=True),
            sa.Column('work_mode', sa.VARCHAR(length=100), nullable=True),
            sa.Column('job_type', sa.VARCHAR(length=100), nullable=True),
            sa.Column('salary_min', sa.FLOAT(), nullable=True),
            sa.Column('salary_max', sa.FLOAT(), nullable=True),
            sa.Column('deadline', sa.VARCHAR(length=100), nullable=True),
            sa.Column('attachments', sa.TEXT(), nullable=True),
            sa.Column('is_active', sa.BOOLEAN(), nullable=True),
            sa.Column('is_deleted', sa.BOOLEAN(), nullable=True),
            sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
            sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
            sa.ForeignKeyConstraint(['job_post_type_id'], ['job_post_types.id'], name=op.f('jobs_job_post_type_id_fkey')),
            sa.ForeignKeyConstraint(['location_id'], ['locations.id'], name=op.f('jobs_location_id_fkey')),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('jobs_user_id_fkey')),
            sa.PrimaryKeyConstraint('id', name=op.f('jobs_pkey'))
        )
        op.create_index(op.f('ix_jobs_id'), 'jobs', ['id'], unique=False)
    
    # Handle job_skills table
    if 'job_skills' in inspector.get_table_names():
        # Table exists, check for missing columns
        columns = [col['name'] for col in inspector.get_columns('job_skills')]
        
        if 'created_at' not in columns:
            op.add_column('job_skills', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True))
    else:
        # Create job_skills table
        op.create_table('job_skills',
            sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
            sa.Column('job_id', sa.INTEGER(), nullable=False),
            sa.Column('skill_id', sa.INTEGER(), nullable=False),
            sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
            sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], name=op.f('job_skills_job_id_fkey')),
            sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], name=op.f('job_skills_skill_id_fkey')),
            sa.PrimaryKeyConstraint('id', name=op.f('job_skills_pkey'))
        )
        op.create_index(op.f('ix_job_skills_id'), 'job_skills', ['id'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    
    # Handle job_skills table
    if 'job_skills' in inspector.get_table_names():
        columns = [col['name'] for col in inspector.get_columns('job_skills')]
        if 'created_at' in columns:
            op.drop_column('job_skills', 'created_at')
        else:
            op.drop_index(op.f('ix_job_skills_id'), table_name='job_skills')
            op.drop_table('job_skills')
    
    # Handle jobs table
    if 'jobs' in inspector.get_table_names():
        columns = [col['name'] for col in inspector.get_columns('jobs')]
        # Remove columns we might have added
        for col_name in ['salary_min', 'salary_max', 'deadline', 'attachments', 'is_active', 'is_deleted', 'updated_at']:
            if col_name in columns:
                op.drop_column('jobs', col_name)
        # If we have the full table structure, drop it
        if all(col in columns for col in ['salary_min', 'salary_max', 'deadline', 'attachments', 'is_active', 'is_deleted', 'updated_at']):
            op.drop_index(op.f('ix_jobs_id'), table_name='jobs')
            op.drop_table('jobs')
    
    # Handle job_post_types table
    if 'job_post_types' in inspector.get_table_names():
        columns = [col['name'] for col in inspector.get_columns('job_post_types')]
        if 'created_at' in columns:
            op.drop_column('job_post_types', 'created_at')
        if 'updated_at' in columns:
            op.drop_column('job_post_types', 'updated_at')
        # If we have the full table structure, drop it
        if 'created_at' in columns and 'updated_at' in columns:
            op.drop_index(op.f('ix_job_post_types_id'), table_name='job_post_types')
            op.drop_table('job_post_types')
    
    # ### end Alembic commands ### 